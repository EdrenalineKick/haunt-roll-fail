package org.scalajs.dom

import scala.scalajs.js

opaque type InputType <: String = String

object InputType {
  val insertText: InputType = "insertText"
  val insertReplacementText: InputType = "insertReplacementText"
  val insertLineBreak: InputType = "insertLineBreak"
  val insertParagraph: InputType = "insertParagraph"
  val insertOrderedList: InputType = "insertOrderedList"
  val insertUnorderedList: InputType = "insertUnorderedList"
  val insertHorizontalRule: InputType = "insertHorizontalRule"
  val insertFromYank: InputType = "insertFromYank"
  val insertFromDrop: InputType = "insertFromDrop"
  val insertFromPaste: InputType = "insertFromPaste"
  val insertFromPasteAsQuotation: InputType = "insertFromPasteAsQuotation"
  val insertTranspose: InputType = "insertTranspose"
  val insertCompositionText: InputType = "insertCompositionText"
  val insertLink: InputType = "insertLink"
  val deleteWordBackward: InputType = "deleteWordBackward"
  val deleteWordForward: InputType = "deleteWordForward"
  val deleteSoftLineBackward: InputType = "deleteSoftLineBackward"
  val deleteSoftLineForward: InputType = "deleteSoftLineForward"
  val deleteEntireSoftLine: InputType = "deleteEntireSoftLine"
  val deleteHardLineBackward: InputType = "deleteHardLineBackward"
  val deleteHardLineForward: InputType = "deleteHardLineForward"
  val deleteByDrag: InputType = "deleteByDrag"
  val deleteByCut: InputType = "deleteByCut"
  val deleteContent: InputType = "deleteContent"
  val deleteContentBackward: InputType = "deleteContentBackward"
  val deleteContentForward: InputType = "deleteContentForward"
  val historyUndo: InputType = "historyUndo"
  val historyRedo: InputType = "historyRedo"
  val formatBold: InputType = "formatBold"
  val formatItalic: InputType = "formatItalic"
  val formatUnderline: InputType = "formatUnderline"
  val formatStrikeThrough: InputType = "formatStrikeThrough"
  val formatSuperscript: InputType = "formatSuperscript"
  val formatSubscript: InputType = "formatSubscript"
  val formatJustifyFull: InputType = "formatJustifyFull"
  val formatJustifyCenter: InputType = "formatJustifyCenter"
  val formatJustifyRight: InputType = "formatJustifyRight"
  val formatJustifyLeft: InputType = "formatJustifyLeft"
  val formatIndent: InputType = "formatIndent"
  val formatOutdent: InputType = "formatOutdent"
  val formatRemove: InputType = "formatRemove"
  val formatSetBlockTextDirection: InputType = "formatSetBlockTextDirection"
  val formatSetInlineTextDirection: InputType = "formatSetInlineTextDirection"
  val formatBackColor: InputType = "formatBackColor"
  val formatFontColor: InputType = "formatFontColor"
  val formatFontName: InputType  = "formatFontName"
}
